
> simplepredictionmarket@0.1.0 build
Attention: Next.js now collects completely anonymous telemetry regarding usage.
This information is used to shape Next.js' roadmap and prioritize features.
You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
https://nextjs.org/telemetry

  ▲ Next.js 15.0.1
  - Environments: .env.local, .env

   Creating an optimized production build ...
> [PWA] Compile server
> [PWA] Compile server
> [PWA] Compile client (static)
> [PWA] Auto register service worker with: /home/runner/workspace/node_modules/next-pwa/register.js
> [PWA] Service worker: /home/runner/workspace/public/sw.js
> [PWA]   url: /sw.js
> [PWA]   scope: /
Failed to compile.

./src/app/api/admin/spaces/route.ts
Error:   × the name `NextResponse` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:2:1]
   1 │ 
   2 │ import { NextRequest, NextResponse } from "next/server";
     ·                       ──────┬─────
     ·                             ╰── previous definition of `NextResponse` here
   3 │ import { twitterDb } from "@/lib/twitter-prisma";
   4 │ 
   5 │ // Same admin validation as in other admin routes
   6 │ const ADMIN_WALLETS = [
   7 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
   8 │   "*", // Temporary wildcard to allow all wallet addresses for testing
   9 │ ];
  10 │ 
  11 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
  12 │   const adminWallet = req.headers.get("x-admin-wallet");
  13 │   if (!adminWallet) return false;
  14 │   const normalizedWallet = adminWallet.toLowerCase();
  15 │   return ADMIN_WALLETS.includes(normalizedWallet);
  16 │ }
  17 │ 
  18 │ // GET /api/admin/spaces - List all spaces
  19 │ export async function GET(req: NextRequest) {
  20 │   try {
  21 │     // Validate admin access
  22 │     if (!(await validateAdmin(req))) {
  23 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  24 │     }
  25 │ 
  26 │     const spaces = await twitterDb.twitterSpace.findMany({
  27 │       include: {
  28 │         hosts: true,
  29 │       },
  30 │       orderBy: [
  31 │         { day_of_week: "asc" },
  32 │         { start_time: "asc" },
  33 │       ],
  34 │     });
  35 │ 
  36 │     return NextResponse.json(spaces);
  37 │   } catch (error) {
  38 │     console.error("Error fetching spaces:", error);
  39 │     return NextResponse.json(
  40 │       { error: "Failed to fetch Twitter spaces" },
  41 │       { status: 500 },
  42 │     );
  43 │   }
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
     ·                       ──────┬─────
     ·                             ╰── `NextResponse` redefined here
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
     ╰────
  × the name `twitterDb` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:3:1]
   1 │ 
   2 │ import { NextRequest, NextResponse } from "next/server";
   3 │ import { twitterDb } from "@/lib/twitter-prisma";
     ·          ────┬────
     ·              ╰── previous definition of `twitterDb` here
   4 │ 
   5 │ // Same admin validation as in other admin routes
   6 │ const ADMIN_WALLETS = [
   7 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
   8 │   "*", // Temporary wildcard to allow all wallet addresses for testing
   9 │ ];
  10 │ 
  11 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
  12 │   const adminWallet = req.headers.get("x-admin-wallet");
  13 │   if (!adminWallet) return false;
  14 │   const normalizedWallet = adminWallet.toLowerCase();
  15 │   return ADMIN_WALLETS.includes(normalizedWallet);
  16 │ }
  17 │ 
  18 │ // GET /api/admin/spaces - List all spaces
  19 │ export async function GET(req: NextRequest) {
  20 │   try {
  21 │     // Validate admin access
  22 │     if (!(await validateAdmin(req))) {
  23 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  24 │     }
  25 │ 
  26 │     const spaces = await twitterDb.twitterSpace.findMany({
  27 │       include: {
  28 │         hosts: true,
  29 │       },
  30 │       orderBy: [
  31 │         { day_of_week: "asc" },
  32 │         { start_time: "asc" },
  33 │       ],
  34 │     });
  35 │ 
  36 │     return NextResponse.json(spaces);
  37 │   } catch (error) {
  38 │     console.error("Error fetching spaces:", error);
  39 │     return NextResponse.json(
  40 │       { error: "Failed to fetch Twitter spaces" },
  41 │       { status: 500 },
  42 │     );
  43 │   }
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
     ·          ────┬────
     ·              ╰── `twitterDb` redefined here
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
     ╰────
  × the name `ADMIN_WALLETS` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:6:1]
   3 │ import { twitterDb } from "@/lib/twitter-prisma";
   4 │ 
   5 │ // Same admin validation as in other admin routes
   6 │ const ADMIN_WALLETS = [
     ·       ──────┬──────
     ·             ╰── previous definition of `ADMIN_WALLETS` here
   7 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
   8 │   "*", // Temporary wildcard to allow all wallet addresses for testing
   9 │ ];
  10 │ 
  11 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
  12 │   const adminWallet = req.headers.get("x-admin-wallet");
  13 │   if (!adminWallet) return false;
  14 │   const normalizedWallet = adminWallet.toLowerCase();
  15 │   return ADMIN_WALLETS.includes(normalizedWallet);
  16 │ }
  17 │ 
  18 │ // GET /api/admin/spaces - List all spaces
  19 │ export async function GET(req: NextRequest) {
  20 │   try {
  21 │     // Validate admin access
  22 │     if (!(await validateAdmin(req))) {
  23 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  24 │     }
  25 │ 
  26 │     const spaces = await twitterDb.twitterSpace.findMany({
  27 │       include: {
  28 │         hosts: true,
  29 │       },
  30 │       orderBy: [
  31 │         { day_of_week: "asc" },
  32 │         { start_time: "asc" },
  33 │       ],
  34 │     });
  35 │ 
  36 │     return NextResponse.json(spaces);
  37 │   } catch (error) {
  38 │     console.error("Error fetching spaces:", error);
  39 │     return NextResponse.json(
  40 │       { error: "Failed to fetch Twitter spaces" },
  41 │       { status: 500 },
  42 │     );
  43 │   }
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
     ·       ──────┬──────
     ·             ╰── `ADMIN_WALLETS` redefined here
 155 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 156 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 157 │ ];
     ╰────
  × the name `validateAdmin` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:11:1]
   8 │   "*", // Temporary wildcard to allow all wallet addresses for testing
   9 │ ];
  10 │ 
  11 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
     ·                ──────┬──────
     ·                      ╰── previous definition of `validateAdmin` here
  12 │   const adminWallet = req.headers.get("x-admin-wallet");
  13 │   if (!adminWallet) return false;
  14 │   const normalizedWallet = adminWallet.toLowerCase();
  15 │   return ADMIN_WALLETS.includes(normalizedWallet);
  16 │ }
  17 │ 
  18 │ // GET /api/admin/spaces - List all spaces
  19 │ export async function GET(req: NextRequest) {
  20 │   try {
  21 │     // Validate admin access
  22 │     if (!(await validateAdmin(req))) {
  23 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  24 │     }
  25 │ 
  26 │     const spaces = await twitterDb.twitterSpace.findMany({
  27 │       include: {
  28 │         hosts: true,
  29 │       },
  30 │       orderBy: [
  31 │         { day_of_week: "asc" },
  32 │         { start_time: "asc" },
  33 │       ],
  34 │     });
  35 │ 
  36 │     return NextResponse.json(spaces);
  37 │   } catch (error) {
  38 │     console.error("Error fetching spaces:", error);
  39 │     return NextResponse.json(
  40 │       { error: "Failed to fetch Twitter spaces" },
  41 │       { status: 500 },
  42 │     );
  43 │   }
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
 155 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 156 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 157 │ ];
 158 │ 
 159 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
     ·                ──────┬──────
     ·                      ╰── `validateAdmin` redefined here
 160 │   const adminWallet = req.headers.get("x-admin-wallet");
 161 │   if (!adminWallet) return false;
 162 │   const normalizedWallet = adminWallet.toLowerCase();
     ╰────
  × the name `GET` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:19:1]
  16 │ }
  17 │ 
  18 │ // GET /api/admin/spaces - List all spaces
  19 │ export async function GET(req: NextRequest) {
     ·                       ─┬─
     ·                        ╰── previous definition of `GET` here
  20 │   try {
  21 │     // Validate admin access
  22 │     if (!(await validateAdmin(req))) {
  23 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  24 │     }
  25 │ 
  26 │     const spaces = await twitterDb.twitterSpace.findMany({
  27 │       include: {
  28 │         hosts: true,
  29 │       },
  30 │       orderBy: [
  31 │         { day_of_week: "asc" },
  32 │         { start_time: "asc" },
  33 │       ],
  34 │     });
  35 │ 
  36 │     return NextResponse.json(spaces);
  37 │   } catch (error) {
  38 │     console.error("Error fetching spaces:", error);
  39 │     return NextResponse.json(
  40 │       { error: "Failed to fetch Twitter spaces" },
  41 │       { status: 500 },
  42 │     );
  43 │   }
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
 155 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 156 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 157 │ ];
 158 │ 
 159 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 160 │   const adminWallet = req.headers.get("x-admin-wallet");
 161 │   if (!adminWallet) return false;
 162 │   const normalizedWallet = adminWallet.toLowerCase();
 163 │   return ADMIN_WALLETS.includes(normalizedWallet);
 164 │ }
 165 │ 
 166 │ // GET /api/admin/spaces - List all spaces
 167 │ export async function GET(req: NextRequest) {
     ·                       ─┬─
     ·                        ╰── `GET` redefined here
 168 │   try {
 169 │     // Validate admin access
 170 │     if (!(await validateAdmin(req))) {
     ╰────
  × the name `POST` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:47:1]
  44 │ }
  45 │ 
  46 │ // POST /api/admin/spaces - Create a new space
  47 │ export async function POST(req: NextRequest) {
     ·                       ──┬─
     ·                         ╰── previous definition of `POST` here
  48 │   try {
  49 │     // Validate admin access
  50 │     if (!(await validateAdmin(req))) {
  51 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  52 │     }
  53 │ 
  54 │     const body = await req.json();
  55 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
  56 │ 
  57 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
  58 │       return NextResponse.json(
  59 │         { error: "Missing required fields" },
  60 │         { status: 400 },
  61 │       );
  62 │     }
  63 │ 
  64 │     // Find Twitter profiles for all hosts
  65 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
  66 │     const existingHosts = await twitterDb.twitterProfile.findMany({
  67 │       where: {
  68 │         username: {
  69 │           in: hostUsernames,
  70 │         },
  71 │       },
  72 │     });
  73 │ 
  74 │     // Check if all hosts exist
  75 │     if (existingHosts.length !== hostUsernames.length) {
  76 │       const missingHosts = hostUsernames.filter(
  77 │         host => !existingHosts.some(h => h.username === host)
  78 │       );
  79 │       
  80 │       return NextResponse.json(
  81 │         { 
  82 │           error: "Some hosts are not found in our Twitter profiles", 
  83 │           missingHosts 
  84 │         },
  85 │         { status: 400 },
  86 │       );
  87 │     }
  88 │ 
  89 │     // Create the space
  90 │     const space = await twitterDb.twitterSpace.create({
  91 │       data: {
  92 │         title,
  93 │         description,
  94 │         start_time: new Date(start_time),
  95 │         end_time: end_time ? new Date(end_time) : undefined,
  96 │         day_of_week,
  97 │         recurring: recurring !== undefined ? recurring : true,
  98 │         points: points || 100,
  99 │         space_id,
 100 │         hosts: {
 101 │           connect: existingHosts.map(host => ({ id: host.id })),
 102 │         },
 103 │       },
 104 │       include: {
 105 │         hosts: true,
 106 │       },
 107 │     });
 108 │ 
 109 │     return NextResponse.json(space, { status: 201 });
 110 │   } catch (error) {
 111 │     console.error("Error creating space:", error);
 112 │     return NextResponse.json(
 113 │       { error: "Failed to create Twitter space" },
 114 │       { status: 500 },
 115 │     );
 116 │   }
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
 155 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 156 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 157 │ ];
 158 │ 
 159 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 160 │   const adminWallet = req.headers.get("x-admin-wallet");
 161 │   if (!adminWallet) return false;
 162 │   const normalizedWallet = adminWallet.toLowerCase();
 163 │   return ADMIN_WALLETS.includes(normalizedWallet);
 164 │ }
 165 │ 
 166 │ // GET /api/admin/spaces - List all spaces
 167 │ export async function GET(req: NextRequest) {
 168 │   try {
 169 │     // Validate admin access
 170 │     if (!(await validateAdmin(req))) {
 171 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 172 │     }
 173 │ 
 174 │     const spaces = await twitterDb.twitterSpace.findMany({
 175 │       include: {
 176 │         hosts: true,
 177 │       },
 178 │       orderBy: [
 179 │         { day_of_week: "asc" },
 180 │         { start_time: "asc" },
 181 │       ],
 182 │     });
 183 │ 
 184 │     return NextResponse.json(spaces);
 185 │   } catch (error) {
 186 │     console.error("Error fetching spaces:", error);
 187 │     return NextResponse.json(
 188 │       { error: "Failed to fetch Twitter spaces" },
 189 │       { status: 500 },
 190 │     );
 191 │   }
 192 │ }
 193 │ 
 194 │ // POST /api/admin/spaces - Create a new space
 195 │ export async function POST(req: NextRequest) {
     ·                       ──┬─
     ·                         ╰── `POST` redefined here
 196 │   try {
 197 │     // Validate admin access
 198 │     if (!(await validateAdmin(req))) {
     ╰────
  × the name `DELETE` is defined multiple times
     ╭─[/home/runner/workspace/src/app/api/admin/spaces/route.ts:120:1]
 117 │ }
 118 │ 
 119 │ // DELETE /api/admin/spaces/:id - Delete a space
 120 │ export async function DELETE(req: NextRequest) {
     ·                       ───┬──
     ·                          ╰── previous definition of `DELETE` here
 121 │   try {
 122 │     // Validate admin access
 123 │     if (!(await validateAdmin(req))) {
 124 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 125 │     }
 126 │ 
 127 │     const { searchParams } = new URL(req.url);
 128 │     const id = searchParams.get("id");
 129 │ 
 130 │     if (!id) {
 131 │       return NextResponse.json(
 132 │         { error: "Space ID is required" },
 133 │         { status: 400 },
 134 │       );
 135 │     }
 136 │ 
 137 │     await twitterDb.twitterSpace.delete({
 138 │       where: { id },
 139 │     });
 140 │ 
 141 │     return NextResponse.json({ success: true });
 142 │   } catch (error) {
 143 │     console.error("Error deleting space:", error);
 144 │     return NextResponse.json(
 145 │       { error: "Failed to delete Twitter space" },
 146 │       { status: 500 },
 147 │     );
 148 │   }
 149 │ }
 150 │ import { NextRequest, NextResponse } from "next/server";
 151 │ import { twitterDb } from "@/lib/twitter-prisma";
 152 │ 
 153 │ // Same admin validation as in other admin routes
 154 │ const ADMIN_WALLETS = [
 155 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 156 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 157 │ ];
 158 │ 
 159 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 160 │   const adminWallet = req.headers.get("x-admin-wallet");
 161 │   if (!adminWallet) return false;
 162 │   const normalizedWallet = adminWallet.toLowerCase();
 163 │   return ADMIN_WALLETS.includes(normalizedWallet);
 164 │ }
 165 │ 
 166 │ // GET /api/admin/spaces - List all spaces
 167 │ export async function GET(req: NextRequest) {
 168 │   try {
 169 │     // Validate admin access
 170 │     if (!(await validateAdmin(req))) {
 171 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 172 │     }
 173 │ 
 174 │     const spaces = await twitterDb.twitterSpace.findMany({
 175 │       include: {
 176 │         hosts: true,
 177 │       },
 178 │       orderBy: [
 179 │         { day_of_week: "asc" },
 180 │         { start_time: "asc" },
 181 │       ],
 182 │     });
 183 │ 
 184 │     return NextResponse.json(spaces);
 185 │   } catch (error) {
 186 │     console.error("Error fetching spaces:", error);
 187 │     return NextResponse.json(
 188 │       { error: "Failed to fetch Twitter spaces" },
 189 │       { status: 500 },
 190 │     );
 191 │   }
 192 │ }
 193 │ 
 194 │ // POST /api/admin/spaces - Create a new space
 195 │ export async function POST(req: NextRequest) {
 196 │   try {
 197 │     // Validate admin access
 198 │     if (!(await validateAdmin(req))) {
 199 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 200 │     }
 201 │ 
 202 │     const body = await req.json();
 203 │     const { title, description, start_time, end_time, day_of_week, hosts, points, recurring, space_id } = body;
 204 │ 
 205 │     if (!title || !day_of_week || !start_time || !hosts || !Array.isArray(hosts) || hosts.length === 0) {
 206 │       return NextResponse.json(
 207 │         { error: "Missing required fields" },
 208 │         { status: 400 },
 209 │       );
 210 │     }
 211 │ 
 212 │     // Find Twitter profiles for all hosts
 213 │     const hostUsernames = hosts.map(host => host.replace('@', ''));
 214 │     const existingHosts = await twitterDb.twitterProfile.findMany({
 215 │       where: {
 216 │         username: {
 217 │           in: hostUsernames,
 218 │         },
 219 │       },
 220 │     });
 221 │ 
 222 │     // Check if all hosts exist
 223 │     if (existingHosts.length !== hostUsernames.length) {
 224 │       const missingHosts = hostUsernames.filter(
 225 │         host => !existingHosts.some(h => h.username === host)
 226 │       );
 227 │       
 228 │       return NextResponse.json(
 229 │         { 
 230 │           error: "Some hosts are not found in our Twitter profiles", 
 231 │           missingHosts 
 232 │         },
 233 │         { status: 400 },
 234 │       );
 235 │     }
 236 │ 
 237 │     // Create the space
 238 │     const space = await twitterDb.twitterSpace.create({
 239 │       data: {
 240 │         title,
 241 │         description,
 242 │         start_time: new Date(start_time),
 243 │         end_time: end_time ? new Date(end_time) : undefined,
 244 │         day_of_week,
 245 │         recurring: recurring !== undefined ? recurring : true,
 246 │         points: points || 100,
 247 │         space_id,
 248 │         hosts: {
 249 │           connect: existingHosts.map(host => ({ id: host.id })),
 250 │         },
 251 │       },
 252 │       include: {
 253 │         hosts: true,
 254 │       },
 255 │     });
 256 │ 
 257 │     return NextResponse.json(space, { status: 201 });
 258 │   } catch (error) {
 259 │     console.error("Error creating space:", error);
 260 │     return NextResponse.json(
 261 │       { error: "Failed to create Twitter space" },
 262 │       { status: 500 },
 263 │     );
 264 │   }
 265 │ }
 266 │ 
 267 │ // DELETE /api/admin/spaces/:id - Delete a space
 268 │ export async function DELETE(req: NextRequest) {
     ·                       ───┬──
     ·                          ╰── `DELETE` redefined here
 269 │   try {
 270 │     // Validate admin access
 271 │     if (!(await validateAdmin(req))) {
     ╰────

Import trace for requested module:
./src/app/api/admin/spaces/route.ts

./src/app/api/admin/spaces/status/route.ts
Error:   × the name `NextResponse` is defined multiple times
    ╭─[/home/runner/workspace/src/app/api/admin/spaces/status/route.ts:2:1]
  1 │ 
  2 │ import { NextRequest, NextResponse } from "next/server";
    ·                       ──────┬─────
    ·                             ╰── previous definition of `NextResponse` here
  3 │ import { twitterDb } from "@/lib/twitter-prisma";
  4 │ 
  5 │ // Admin wallet addresses - keep this list secure and limited
  6 │ const ADMIN_WALLETS = [
  7 │   // Add your admin wallet addresses here in lowercase for consistent comparison
  8 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
  9 │   // Add more wallet addresses to ensure access
 10 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 11 │   // Add more as needed
 12 │ ];
 13 │ 
 14 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 15 │   const adminWallet = req.headers.get("x-admin-wallet");
 16 │   if (!adminWallet) return false;
 17 │   
 18 │   // Convert to lowercase for case-insensitive comparison
 19 │   const normalizedWallet = adminWallet.toLowerCase();
 20 │   
 21 │   // Check if the wallet is in our admin list
 22 │   return ADMIN_WALLETS.includes(normalizedWallet);
 23 │ }
 24 │ 
 25 │ // POST /api/admin/spaces/status - Update space status
 26 │ export async function POST(req: NextRequest) {
 27 │   try {
 28 │     // Validate admin access
 29 │     if (!(await validateAdmin(req))) {
 30 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 31 │     }
 32 │ 
 33 │     const { id, isActive } = await req.json();
 34 │ 
 35 │     if (!id) {
 36 │       return NextResponse.json(
 37 │         { error: "Space ID is required" },
 38 │         { status: 400 },
 39 │       );
 40 │     }
 41 │ 
 42 │     // Update the space (in a real implementation, you might have a specific status field)
 43 │     const updatedSpace = await twitterDb.twitterSpace.update({
 44 │       where: { id },
 45 │       data: {
 46 │         // This could be a specific status field in your schema
 47 │         // For now, we'll use a placeholder approach
 48 │         // isActive: isActive,
 49 │         description: isActive 
 50 │           ? `${(await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || ''} (Active)`.trim()
 51 │           : ((await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || '')
 52 │               .replace(/ \(Active\)$/, ''),
 53 │       },
 54 │       include: {
 55 │         hosts: true,
 56 │       },
 57 │     });
 58 │ 
 59 │     return NextResponse.json(updatedSpace);
 60 │   } catch (error) {
 61 │     console.error("Error updating space status:", error);
 62 │     return NextResponse.json(
 63 │       { error: "Failed to update space status" },
 64 │       { status: 500 },
 65 │     );
 66 │   }
 67 │ }
 68 │ import { NextRequest, NextResponse } from "next/server";
    ·                       ──────┬─────
    ·                             ╰── `NextResponse` redefined here
 69 │ import { twitterDb } from "@/lib/twitter-prisma";
 70 │ 
 71 │ // Admin wallet addresses - keep this list secure and limited
    ╰────
  × the name `twitterDb` is defined multiple times
    ╭─[/home/runner/workspace/src/app/api/admin/spaces/status/route.ts:3:1]
  1 │ 
  2 │ import { NextRequest, NextResponse } from "next/server";
  3 │ import { twitterDb } from "@/lib/twitter-prisma";
    ·          ────┬────
    ·              ╰── previous definition of `twitterDb` here
  4 │ 
  5 │ // Admin wallet addresses - keep this list secure and limited
  6 │ const ADMIN_WALLETS = [
  7 │   // Add your admin wallet addresses here in lowercase for consistent comparison
  8 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
  9 │   // Add more wallet addresses to ensure access
 10 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 11 │   // Add more as needed
 12 │ ];
 13 │ 
 14 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 15 │   const adminWallet = req.headers.get("x-admin-wallet");
 16 │   if (!adminWallet) return false;
 17 │   
 18 │   // Convert to lowercase for case-insensitive comparison
 19 │   const normalizedWallet = adminWallet.toLowerCase();
 20 │   
 21 │   // Check if the wallet is in our admin list
 22 │   return ADMIN_WALLETS.includes(normalizedWallet);
 23 │ }
 24 │ 
 25 │ // POST /api/admin/spaces/status - Update space status
 26 │ export async function POST(req: NextRequest) {
 27 │   try {
 28 │     // Validate admin access
 29 │     if (!(await validateAdmin(req))) {
 30 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 31 │     }
 32 │ 
 33 │     const { id, isActive } = await req.json();
 34 │ 
 35 │     if (!id) {
 36 │       return NextResponse.json(
 37 │         { error: "Space ID is required" },
 38 │         { status: 400 },
 39 │       );
 40 │     }
 41 │ 
 42 │     // Update the space (in a real implementation, you might have a specific status field)
 43 │     const updatedSpace = await twitterDb.twitterSpace.update({
 44 │       where: { id },
 45 │       data: {
 46 │         // This could be a specific status field in your schema
 47 │         // For now, we'll use a placeholder approach
 48 │         // isActive: isActive,
 49 │         description: isActive 
 50 │           ? `${(await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || ''} (Active)`.trim()
 51 │           : ((await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || '')
 52 │               .replace(/ \(Active\)$/, ''),
 53 │       },
 54 │       include: {
 55 │         hosts: true,
 56 │       },
 57 │     });
 58 │ 
 59 │     return NextResponse.json(updatedSpace);
 60 │   } catch (error) {
 61 │     console.error("Error updating space status:", error);
 62 │     return NextResponse.json(
 63 │       { error: "Failed to update space status" },
 64 │       { status: 500 },
 65 │     );
 66 │   }
 67 │ }
 68 │ import { NextRequest, NextResponse } from "next/server";
 69 │ import { twitterDb } from "@/lib/twitter-prisma";
    ·          ────┬────
    ·              ╰── `twitterDb` redefined here
 70 │ 
 71 │ // Admin wallet addresses - keep this list secure and limited
 72 │ const ADMIN_WALLETS = [
    ╰────
  × the name `ADMIN_WALLETS` is defined multiple times
    ╭─[/home/runner/workspace/src/app/api/admin/spaces/status/route.ts:6:1]
  3 │ import { twitterDb } from "@/lib/twitter-prisma";
  4 │ 
  5 │ // Admin wallet addresses - keep this list secure and limited
  6 │ const ADMIN_WALLETS = [
    ·       ──────┬──────
    ·             ╰── previous definition of `ADMIN_WALLETS` here
  7 │   // Add your admin wallet addresses here in lowercase for consistent comparison
  8 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
  9 │   // Add more wallet addresses to ensure access
 10 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 11 │   // Add more as needed
 12 │ ];
 13 │ 
 14 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 15 │   const adminWallet = req.headers.get("x-admin-wallet");
 16 │   if (!adminWallet) return false;
 17 │   
 18 │   // Convert to lowercase for case-insensitive comparison
 19 │   const normalizedWallet = adminWallet.toLowerCase();
 20 │   
 21 │   // Check if the wallet is in our admin list
 22 │   return ADMIN_WALLETS.includes(normalizedWallet);
 23 │ }
 24 │ 
 25 │ // POST /api/admin/spaces/status - Update space status
 26 │ export async function POST(req: NextRequest) {
 27 │   try {
 28 │     // Validate admin access
 29 │     if (!(await validateAdmin(req))) {
 30 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 31 │     }
 32 │ 
 33 │     const { id, isActive } = await req.json();
 34 │ 
 35 │     if (!id) {
 36 │       return NextResponse.json(
 37 │         { error: "Space ID is required" },
 38 │         { status: 400 },
 39 │       );
 40 │     }
 41 │ 
 42 │     // Update the space (in a real implementation, you might have a specific status field)
 43 │     const updatedSpace = await twitterDb.twitterSpace.update({
 44 │       where: { id },
 45 │       data: {
 46 │         // This could be a specific status field in your schema
 47 │         // For now, we'll use a placeholder approach
 48 │         // isActive: isActive,
 49 │         description: isActive 
 50 │           ? `${(await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || ''} (Active)`.trim()
 51 │           : ((await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || '')
 52 │               .replace(/ \(Active\)$/, ''),
 53 │       },
 54 │       include: {
 55 │         hosts: true,
 56 │       },
 57 │     });
 58 │ 
 59 │     return NextResponse.json(updatedSpace);
 60 │   } catch (error) {
 61 │     console.error("Error updating space status:", error);
 62 │     return NextResponse.json(
 63 │       { error: "Failed to update space status" },
 64 │       { status: 500 },
 65 │     );
 66 │   }
 67 │ }
 68 │ import { NextRequest, NextResponse } from "next/server";
 69 │ import { twitterDb } from "@/lib/twitter-prisma";
 70 │ 
 71 │ // Admin wallet addresses - keep this list secure and limited
 72 │ const ADMIN_WALLETS = [
    ·       ──────┬──────
    ·             ╰── `ADMIN_WALLETS` redefined here
 73 │   // Add your admin wallet addresses here in lowercase for consistent comparison
 74 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 75 │   // Add more wallet addresses to ensure access
    ╰────
  × the name `validateAdmin` is defined multiple times
    ╭─[/home/runner/workspace/src/app/api/admin/spaces/status/route.ts:14:1]
 11 │   // Add more as needed
 12 │ ];
 13 │ 
 14 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
    ·                ──────┬──────
    ·                      ╰── previous definition of `validateAdmin` here
 15 │   const adminWallet = req.headers.get("x-admin-wallet");
 16 │   if (!adminWallet) return false;
 17 │   
 18 │   // Convert to lowercase for case-insensitive comparison
 19 │   const normalizedWallet = adminWallet.toLowerCase();
 20 │   
 21 │   // Check if the wallet is in our admin list
 22 │   return ADMIN_WALLETS.includes(normalizedWallet);
 23 │ }
 24 │ 
 25 │ // POST /api/admin/spaces/status - Update space status
 26 │ export async function POST(req: NextRequest) {
 27 │   try {
 28 │     // Validate admin access
 29 │     if (!(await validateAdmin(req))) {
 30 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 31 │     }
 32 │ 
 33 │     const { id, isActive } = await req.json();
 34 │ 
 35 │     if (!id) {
 36 │       return NextResponse.json(
 37 │         { error: "Space ID is required" },
 38 │         { status: 400 },
 39 │       );
 40 │     }
 41 │ 
 42 │     // Update the space (in a real implementation, you might have a specific status field)
 43 │     const updatedSpace = await twitterDb.twitterSpace.update({
 44 │       where: { id },
 45 │       data: {
 46 │         // This could be a specific status field in your schema
 47 │         // For now, we'll use a placeholder approach
 48 │         // isActive: isActive,
 49 │         description: isActive 
 50 │           ? `${(await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || ''} (Active)`.trim()
 51 │           : ((await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || '')
 52 │               .replace(/ \(Active\)$/, ''),
 53 │       },
 54 │       include: {
 55 │         hosts: true,
 56 │       },
 57 │     });
 58 │ 
 59 │     return NextResponse.json(updatedSpace);
 60 │   } catch (error) {
 61 │     console.error("Error updating space status:", error);
 62 │     return NextResponse.json(
 63 │       { error: "Failed to update space status" },
 64 │       { status: 500 },
 65 │     );
 66 │   }
 67 │ }
 68 │ import { NextRequest, NextResponse } from "next/server";
 69 │ import { twitterDb } from "@/lib/twitter-prisma";
 70 │ 
 71 │ // Admin wallet addresses - keep this list secure and limited
 72 │ const ADMIN_WALLETS = [
 73 │   // Add your admin wallet addresses here in lowercase for consistent comparison
 74 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 75 │   // Add more wallet addresses to ensure access
 76 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 77 │   // Add more as needed
 78 │ ];
 79 │ 
 80 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
    ·                ──────┬──────
    ·                      ╰── `validateAdmin` redefined here
 81 │   const adminWallet = req.headers.get("x-admin-wallet");
 82 │   if (!adminWallet) return false;
 83 │   
    ╰────
  × the name `POST` is defined multiple times
    ╭─[/home/runner/workspace/src/app/api/admin/spaces/status/route.ts:26:1]
 23 │ }
 24 │ 
 25 │ // POST /api/admin/spaces/status - Update space status
 26 │ export async function POST(req: NextRequest) {
    ·                       ──┬─
    ·                         ╰── previous definition of `POST` here
 27 │   try {
 28 │     // Validate admin access
 29 │     if (!(await validateAdmin(req))) {
 30 │       return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
 31 │     }
 32 │ 
 33 │     const { id, isActive } = await req.json();
 34 │ 
 35 │     if (!id) {
 36 │       return NextResponse.json(
 37 │         { error: "Space ID is required" },
 38 │         { status: 400 },
 39 │       );
 40 │     }
 41 │ 
 42 │     // Update the space (in a real implementation, you might have a specific status field)
 43 │     const updatedSpace = await twitterDb.twitterSpace.update({
 44 │       where: { id },
 45 │       data: {
 46 │         // This could be a specific status field in your schema
 47 │         // For now, we'll use a placeholder approach
 48 │         // isActive: isActive,
 49 │         description: isActive 
 50 │           ? `${(await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || ''} (Active)`.trim()
 51 │           : ((await twitterDb.twitterSpace.findUnique({ where: { id } }))?.description || '')
 52 │               .replace(/ \(Active\)$/, ''),
 53 │       },
 54 │       include: {
 55 │         hosts: true,
 56 │       },
 57 │     });
 58 │ 
 59 │     return NextResponse.json(updatedSpace);
 60 │   } catch (error) {
 61 │     console.error("Error updating space status:", error);
 62 │     return NextResponse.json(
 63 │       { error: "Failed to update space status" },
 64 │       { status: 500 },
 65 │     );
 66 │   }
 67 │ }
 68 │ import { NextRequest, NextResponse } from "next/server";
 69 │ import { twitterDb } from "@/lib/twitter-prisma";
 70 │ 
 71 │ // Admin wallet addresses - keep this list secure and limited
 72 │ const ADMIN_WALLETS = [
 73 │   // Add your admin wallet addresses here in lowercase for consistent comparison
 74 │   "0x1a5b5a2ff1f70989e186ac6109705cf2ca327158",
 75 │   // Add more wallet addresses to ensure access
 76 │   "*", // Temporary wildcard to allow all wallet addresses for testing
 77 │   // Add more as needed
 78 │ ];
 79 │ 
 80 │ async function validateAdmin(req: NextRequest): Promise<boolean> {
 81 │   const adminWallet = req.headers.get("x-admin-wallet");
 82 │   if (!adminWallet) return false;
 83 │   
 84 │   // Convert to lowercase for case-insensitive comparison
 85 │   const normalizedWallet = adminWallet.toLowerCase();
 86 │   
 87 │   // Check if the wallet is in our admin list
 88 │   return ADMIN_WALLETS.includes(normalizedWallet);
 89 │ }
 90 │ 
 91 │ // POST /api/admin/spaces/status - Update space status
 92 │ export async function POST(req: NextRequest) {
    ·                       ──┬─
    ·                         ╰── `POST` redefined here
 93 │   try {
 94 │     // Validate admin access
 95 │     if (!(await validateAdmin(req))) {
    ╰────

Import trace for requested module:
./src/app/api/admin/spaces/status/route.ts


> Build failed because of webpack errors
