
> simplepredictionmarket@0.1.0 build
> prisma generate --schema=./prisma/twitter-schema.prisma && next build

Environment variables loaded from .env
Prisma schema loaded from prisma/twitter-schema.prisma

✔ Generated Prisma Client (v6.5.0) to ./node_modules/@prisma/twitter-client in 105ms

Start by importing your Prisma Client (See: https://pris.ly/d/importing-client)

Tip: Need your database queries to be 1000x faster? Accelerate offers you that and more: https://pris.ly/tip-2-accelerate

  ▲ Next.js 15.0.1
  - Environments: .env.local, .env

   Creating an optimized production build ...
> [PWA] Compile server
> [PWA] Compile server
> [PWA] Compile client (static)
> [PWA] Auto register service worker with: /home/runner/workspace/node_modules/next-pwa/register.js
> [PWA] Service worker: /home/runner/workspace/public/sw.js
> [PWA]   url: /sw.js
> [PWA]   scope: /
> [PWA] Fallback to precache routes when fetch failed from cache or network:
> [PWA]   document (page): /404
 ✓ Compiled successfully

./src/lib/batch-twitter-fetcher.ts
1:14  Warning: 'twitterDb' is defined but never used. Allowed unused vars must match /^_/u.  @typescript-eslint/no-unused-vars

info  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/basic-features/eslint#disabling-rules
Failed to compile.

./src/app/api/admin/creators/fetch-single/route.ts:67:30
Type error: Property 'twitterWhitelist' does not exist on type 'PrismaClient<PrismaClientOptions, never, DefaultArgs> | { twitterProfile: { findUnique: () => Promise<null>; findMany: () => Promise<...>; create: () => Promise<...>; update: () => Promise<...>; upsert: () => Promise<...>; }; twitterSpace: { ...; }; twitterSpaceRSVP: { ...; }; whitelistedCreator: { ...; }; }'.
  Property 'twitterWhitelist' does not exist on type '{ twitterProfile: { findUnique: () => Promise<null>; findMany: () => Promise<never[]>; create: () => Promise<null>; update: () => Promise<null>; upsert: () => Promise<null>; }; twitterSpace: { ...; }; twitterSpaceRSVP: { ...; }; whitelistedCreator: { ...; }; }'.

  65 |
  66 |     // Check if creator exists in whitelist
> 67 |     const creator = await db.twitterWhitelist.findUnique({
     |                              ^
  68 |       where: { username: cleanUsername },
  69 |     });
  70 |
