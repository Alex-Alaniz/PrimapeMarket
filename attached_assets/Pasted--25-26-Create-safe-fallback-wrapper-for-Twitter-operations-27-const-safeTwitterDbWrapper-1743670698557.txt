 25 │ 
 26 │ // Create safe fallback wrapper for Twitter operations
 27 │ const safeTwitterDbWrapper = {
 28 │   twitterProfile: {
 29 │     findUnique: async () => null,
 30 │     findMany: async () => [],
 31 │     create: async () => null,
 32 │     update: async () => null,
 33 │     upsert: async () => null,
 34 │   },
 35 │   twitterSpace: {
 36 │     findUnique: async () => null,
 37 │     findMany: async () => [],
 38 │     create: async () => null,
 39 │     update: async () => null,
 40 │     upsert: async () => null,
 41 │   },
 42 │   twitterSpaceRSVP: {
 43 │     findUnique: async () => null,
 44 │     findMany: async () => [],
 45 │     create: async () => null,
 46 │     update: async () => null,
 47 │     upsert: async () => null,
 48 │     count: async () => 0,
 49 │   },
 50 │   whitelistedCreator: {
 51 │     findUnique: async () => null,
 52 │     findMany: async () => [],
 53 │     create: async () => null,
 54 │     update: async () => null,
 55 │     upsert: async () => null,
 56 │     count: async () => 0,
 57 │   },
 58 │ };
 59 │ 
 60 │ // Export the Twitter database client
 61 │ export const twitterDb = hasTwitterClient ? twitterDb : null;
    ·              ────┬────
    ·                  ╰── const variable was declared here
 62 │ 
 63 │ // Export a safe wrapper for when the Twitter client isn't available
 64 │ export const db = hasTwitterClient ? twitterDb || safeTwitterDbWrapper : safeTwitterDbWrapper;
    ╰────
  × cannot reassign to a variable declared with `const`
    ╭─[/home/runner/workspace/src/lib/twitter-prisma.ts:22:1]
 19 │     console.log('Twitter Prisma client initialized successfully');
 20 │   } catch (error) {
 21 │     console.error('Failed to initialize Twitter Prisma client:', error);
 22 │     twitterDb = null;
    ·     ────┬────
    ·         ╰── cannot reassign
 23 │   }
 24 │ }
 25 │ 
 26 │ // Create safe fallback wrapper for Twitter operations
 27 │ const safeTwitterDbWrapper = {
 28 │   twitterProfile: {
 29 │     findUnique: async () => null,
 30 │     findMany: async () => [],
 31 │     create: async () => null,
 32 │     update: async () => null,
 33 │     upsert: async () => null,
 34 │   },
 35 │   twitterSpace: {
 36 │     findUnique: async () => null,
 37 │     findMany: async () => [],
 38 │     create: async () => null,
 39 │     update: async () => null,
 40 │     upsert: async () => null,
 41 │   },
 42 │   twitterSpaceRSVP: {
 43 │     findUnique: async () => null,
 44 │     findMany: async () => [],
 45 │     create: async () => null,
 46 │     update: async () => null,
 47 │     upsert: async () => null,
 48 │     count: async () => 0,
 49 │   },
 50 │   whitelistedCreator: {
 51 │     findUnique: async () => null,
 52 │     findMany: async () => [],
 53 │     create: async () => null,
 54 │     update: async () => null,
 55 │     upsert: async () => null,
 56 │     count: async () => 0,
 57 │   },
 58 │ };
 59 │ 
 60 │ // Export the Twitter database client
 61 │ export const twitterDb = hasTwitterClient ? twitterDb : null;
    ·              ────┬────
    ·                  ╰── const variable was declared here
 62 │ 
 63 │ // Export a safe wrapper for when the Twitter client isn't available
 64 │ export const db = hasTwitterClient ? twitterDb || safeTwitterDbWrapper : safeTwitterDbWrapper;
    ╰────
  × the name `twitterDb` is defined multiple times
    ╭─[/home/runner/workspace/src/lib/twitter-prisma.ts:8:1]
  5 │ const hasTwitterClient = !!process.env.DATABASE_URL_TWITTER;
  6 │ 
  7 │ // Initialize Twitter Prisma client if available
  8 │ let twitterDb: TwitterPrismaClient | null = null;
    ·     ────┬────
    ·         ╰── previous definition of `twitterDb` here
  9 │ 
 10 │ if (hasTwitterClient) {
 11 │   try {
 12 │     twitterDb = new TwitterPrismaClient({
 13 │       datasources: {
 14 │         db: {
 15 │           url: process.env.DATABASE_URL_TWITTER || '',
 16 │         },
 17 │       },
 18 │     });
 19 │     console.log('Twitter Prisma client initialized successfully');
 20 │   } catch (error) {
 21 │     console.error('Failed to initialize Twitter Prisma client:', error);
 22 │     twitterDb = null;
 23 │   }
 24 │ }
 25 │ 
 26 │ // Create safe fallback wrapper for Twitter operations
 27 │ const safeTwitterDbWrapper = {
 28 │   twitterProfile: {
 29 │     findUnique: async () => null,
 30 │     findMany: async () => [],
 31 │     create: async () => null,
 32 │     update: async () => null,
 33 │     upsert: async () => null,
 34 │   },
 35 │   twitterSpace: {
 36 │     findUnique: async () => null,
 37 │     findMany: async () => [],
 38 │     create: async () => null,
 39 │     update: async () => null,
 40 │     upsert: async () => null,
 41 │   },
 42 │   twitterSpaceRSVP: {
 43 │     findUnique: async () => null,
 44 │     findMany: async () => [],
 45 │     create: async () => null,
 46 │     update: async () => null,
 47 │     upsert: async () => null,
 48 │     count: async () => 0,
 49 │   },
 50 │   whitelistedCreator: {
 51 │     findUnique: async () => null,
 52 │     findMany: async () => [],
 53 │     create: async () => null,
 54 │     update: async () => null,
 55 │     upsert: async () => null,
 56 │     count: async () => 0,
 57 │   },
 58 │ };
 59 │ 
 60 │ // Export the Twitter database client
 61 │ export const twitterDb = hasTwitterClient ? twitterDb : null;
    ·              ────┬────
    ·                  ╰── `twitterDb` redefined here
 62 │ 
 63 │ // Export a safe wrapper for when the Twitter client isn't available
 64 │ export const db = hasTwitterClient ? twitterDb || safeTwitterDbWrapper : safeTwitterDbWrapper;
    ╰────

Import trace for requested module:
./src/lib/twitter-prisma.ts
./src/app/api/creators/route.ts


> Build failed because of webpack errors
